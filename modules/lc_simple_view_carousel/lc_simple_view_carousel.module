<?php

/**
 * @file
 * LC Simple View Carrousel module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Views;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Routing\RouteMatchInterface;


/**
 * Implements hook_page_attachments().
 */
function lc_simple_view_carousel_page_attachments(&$page) {
  $page['#attached']['library'][] = 'lc_simple_view_carousel/lc_simple_view_carousel';
}

/**
 * Implements hook_block_type_form_alter().
 */
function lc_simple_view_carousel_block_type_form_alter(array &$form, FormStateInterface &$form_state, $block_type) {
  if ($block_type == "simple_view_carousel") {
    if (!array_key_exists('#block', $form)) {
      return;
    }

    // Provide a custom ajax callback.
    $form['field_vc']['widget']['#ajax'] = [
      'callback' => 'lc_simple_view_carousel_change',
      'event' => 'change',
    ];

    $view_id = '';

    if (isset($form['field_vc']['widget']['#default_value'][0])) {
      $view_id = $form['field_vc']['widget']['#default_value'][0];
    }

    // Display alter.
    if (!empty($view_id)) {
      $form['field_vc_display']['widget']['#options'] = _lc_simple_view_carousel_view_displays($view_id);
    }
    $form['field_vc_display']['#prefix'] = '<span id="field_vc_display">';
    $form['field_vc_display']['#suffix'] = '</span>';

    // Include the warning.
    $form['warning'] = [
      '#type' => 'markup',
      '#markup' => '<span class="warning"><div class="js-form-item form-item js-form-type-select form-type-select text-danger">' . t('The text of each tab will be collected from the "field_tab_pagination_text" field of each type of content') . '</div></span>',
      '#weight' => '999',
    ];
  }
}

/**
 * The ajax reponse for displays.
 * @param array $form
 *   The complete form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state.
 */
function lc_simple_view_carousel_change(array $form, FormStateInterface $form_state) {
  // Get object.
  $object = $form_state->getCompleteForm();

  // Get the field array.
  $field = $object['settings']['block_form']['field_vc_display'];

  // Find the view displays.
  $view_id = $form_state->getTriggeringElement()['#value'];
  $field['widget']['#options'] = _lc_simple_view_carousel_view_displays($view_id);

  // Generate the response with ajax.
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand('#field_vc_display', $field));

  return $response;
}

/**
 * Return the displays by view.
 * @param string $id
 *   The view id.
 */
function _lc_simple_view_carousel_view_displays($id) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = Views::getView($id);
  $displays = $view->storage->get('display');

  $options = [];
  foreach ($displays as $i => $display) {
    $options[$display['id']] = $display['id'];
  }

  // Store the new options in the field.
  _lc_simple_view_carousel_save_field('field_vc_display', $options);

  return $options;
}

/**
 * Save the new displays in the field.
 * @param string $field
 *   The field.
 * @param array $options
 *   The options.
 */
function _lc_simple_view_carousel_save_field($field, $options) {
  // Ensure that the new options are also added to the allowed_values list.
  $fieldStorage = FieldStorageConfig::loadByName('block_content', $field);
  $fieldStorage->setSetting('allowed_values', $options);
  $fieldStorage->save();
}

/**
 * Implements hook_preprocess_page().
 */
function lc_simple_view_carousel_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] != 'inline_block') {
    return;
  }

  if ($variables['derivative_plugin_id'] != 'simple_view_carousel') {
    return;
  }

  /** @var \Drupal\block_content\Entity\BlockContent $block */
  $block = $variables['content']['#block_content'];

  // The view id home_carousel-slider.
  $id = $block->get('field_vc')->getString();

  if (!empty($id)) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = Views::getView($id);
    $display = $block->get('field_vc_display')->getString();

    // Render the view.
    $variables['content']['field_vc'][0] = $view->render($display);

    // The items of the carousel.
    if (!array_key_exists('#build', $variables['content']['field_vc'][0]['#rows'])) {
      return;
    }
    
    $items = $variables['content']['field_vc'][0]['#rows']['#build']['items'];
    $js_settings = [];

    // Find the values for the dots.
    foreach ($items as $i => $item) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = $item['slide']['#node'];
      if ($node->hasField('field_tab_pagination_text')) {
        $js_settings[] = [
          'title' => $node->get('field_tab_pagination_text')->getString(),
        ];
      }
    }

    // Add custom libraries.
    $variables['#attached']['library'][] = 'lc_simple_view_carousel/lc_simple_view_carousel';
    $variables['#attached']['drupalSettings']['homeCarousel']['id'] = 'block_content/' . $block->id();
    $variables['#attached']['drupalSettings']['homeCarousel']['items'] = $js_settings;
  }
}

/**
 * Implements hook_help().
 */
function lc_simple_view_carousel_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Create help page.
    case 'help.page.lc_simple_view_carousel':
      $module_handler = \Drupal::service('module_handler');
      $module_path = $module_handler->getModule('lc_simple_view_carousel')->getPath();
      $file = $module_path . '/README.md';
      if (!file_exists($file)) {
        return '';
      }

      // Get content from file.
      $reader = file_get_contents($file);

      // Return "clean" content.
      return preg_replace("/\r\n|\n|\r/", "<br>", $reader);
  }
}
