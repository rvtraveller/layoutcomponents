<?php

/**
 * @file
 * Install, uninstall and update hooks for Layoutcomponents Blocks module.
 */

use Drupal\Component\Utility\NestedArray;
use Symfony\Component\Yaml\Yaml;

/**
 * If the Bootstrap module don't exist, show a warning on the status page.
 */
function layoutcomponents_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {
    // Check if bootstrap theme exists.
    $theme_handler = \Drupal::service('theme_handler');
    $themes = $theme_handler->listInfo();
    if (!empty($themes)) {
      $themes_list = array_keys($themes);
      if (!in_array("bootstrap_barrio", $themes_list)) {
        $requirements['drupal'] = [
          'title' => t('Layout Components: Bootstrap Barrio'),
          'value' => t('Missing'),
          'description' => t('For installing Layout Components itÂ´s necessary to have installed Bootstrap Barrio.'),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
    }
  }
  return $requirements;
}

/**
 * Reads in new configuration.
 *
 * @param string $config_name
 *   Configuration name.
 * @param string $bp_path
 *   Base path.
 */
function layoutcomponents_read_in_new_config($config_name, $bp_path) {
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');
  $active_storage->write($config_name, Yaml::parse(file_get_contents($bp_path . '/config/install/' . $config_name . '.yml')));
}

/**
 * Updates a configuration from yml file.
 *
 * @param string $ymlFileName
 *   Yml file name (without .yml suffix).
 * @param array $sets
 *   An array of what needs to be set.
 *   - The key will be what we are setting (Can have . in string for array).
 *   - The value is the key that will be used from the new config file (Can have
 *     . in string for array).
 *
 *   For example if you are updating 'content' with 'content' from the new
 *   config file, $sets would be ['content' => 'content'].
 */
function layoutcomponents_update_configuration_from_yml($ymlFileName, array $sets) {
  $bp_path = drupal_get_path('module', 'layoutcomponents');
  $yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/' . $ymlFileName . '.yml'));
  $config = \Drupal::configFactory()->getEditable($ymlFileName);
  foreach ($sets as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $config->set($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      $config->set($key, $value);
    }
  }
  $config->save(TRUE);
}

/**
 * Update entity from yml.
 *
 * Some config like form display needs to be updated via config manager.
 *
 * @param string $ymlFileName
 *   Yml file name.
 * @param string $entityType
 *   The entity type for this storage.
 * @param mixed $id
 *   The ID of the entity to load.
 * @param array $setComponents
 *   Array of components you want to add.
 *   - The key will be what we are setting.
 *   - The value is the key that will be used from the new config file (Can have
 *     . in string for array).
 */
function layoutcomponents_update_entity_from_yml($ymlFileName, $entityType, $id, array $setComponents) {
  $bp_path = drupal_get_path('module', 'layoutcomponents');
  $yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/' . $ymlFileName . '.yml'));

  $entity = \Drupal::entityTypeManager()
    ->getStorage($entityType)
    ->load($id);
  foreach ($setComponents as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $entity->setComponent($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      $entity->setComponent($key, $value);
    }
  }

  $entity->save();
}
